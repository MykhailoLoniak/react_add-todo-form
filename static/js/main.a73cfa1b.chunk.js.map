{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["users","id","name","username","email","todos","title","completed","userId","UserInfo","user","matchingUser","usersFromServer","find","getUser","className","href","TodoInfo","todo","TodoList","map","App","setTodos","useState","todosFromServer","userError","setUserError","maxId","Math","max","Number","inputTodo","setInputTodo","handleOnChange","fieldName","event","newValue","target","value","replace","prevState","action","method","onSubmit","preventDefault","hasError","prevTodos","htmlFor","type","onChange","placeholder","us","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a73cfa1b.chunk.js","sourcesContent":["const users = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n\nexport default users;\n","const todos = [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n\nexport default todos;\n","import usersFromServer from '../../api/users';\n\ninterface UserInfoProps {\n  userId: number;\n}\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ userId }) => {\n  const getUser = (id: number) => {\n    const matchingUser = usersFromServer.find(user => user.id === +id);\n\n    return matchingUser;\n  };\n\n  const user = getUser(+userId);\n\n  if (!user) {\n    // Handle the case where no matching user is found\n    return <span className=\"UserInfo\">User not found</span>;\n  }\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import { UserInfo } from '../UserInfo';\nimport { Todo } from '../types';\n\ninterface TodoInfoProps {\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={`TodoInfo  ${todo.completed ? 'TodoInfo--completed' : ''}`}\n    key={todo.id}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n    <UserInfo userId={todo.userId} />\n  </article>\n);\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../types';\n\ninterface TodoListProps {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoList } from './components/TodoList';\nimport './App.scss';\nimport { Todo } from './components/types';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>([...todosFromServer]);\n  const [userError, setUserError] = useState({\n    userId: false,\n    title: false,\n  });\n\n  const maxId = Math.max(...todos.map(todo => Number(todo.id)), 0);\n  const [inputTodo, setInputTodo] = useState(\n    {\n      id: maxId + 1,\n      title: '',\n      completed: false,\n      userId: 0,\n    },\n  );\n\n  function reset() {\n    setInputTodo({\n      id: maxId + 1,\n      title: '',\n      completed: false,\n      userId: 0,\n    });\n  }\n\n  // const getUser = (userId: number): User | undefined => {\n  //   const matchingUser = usersFromServer.find(u => u.id === +userId);\n\n  //   return matchingUser;\n  // };\n\n  function handleOnChange(\n    fieldName: string,\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) {\n    let newValue = event.target.value;\n\n    newValue = newValue.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, '');\n\n    setInputTodo(prevState => (\n      {\n        ...prevState,\n        [fieldName]: newValue,\n      }\n    ));\n\n    setUserError(prevState => ({\n      ...prevState,\n      [fieldName]: false,\n    }));\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    let hasError = false;\n\n    if (inputTodo.userId === 0) {\n      setUserError(prevState => ({\n        ...prevState,\n        userId: true,\n      }));\n      hasError = true;\n    }\n\n    if (!inputTodo.title) {\n      setUserError(prevState => ({\n        ...prevState,\n        title: true,\n      }));\n      hasError = true;\n    }\n\n    if (hasError) {\n      return;\n    }\n\n    setTodos(prevTodos => [...prevTodos, { ...inputTodo, id: maxId + 1 }]);\n    reset();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            data-cy=\"titleInput\"\n            onChange={(event) => handleOnChange('title', event)}\n            value={inputTodo.title}\n            placeholder=\"Enter a title\"\n          />\n          {userError.title\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            id=\"user\"\n            data-cy=\"userSelect\"\n            value={inputTodo.userId}\n            onChange={(event) => handleOnChange('userId', event)}\n          >\n            <option value=\"0\">Choose a user</option>\n            {usersFromServer.map(us => (\n              <option value={us.id} key={us.id}>{us.name}</option>\n            ))}\n          </select>\n\n          {userError.userId\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}